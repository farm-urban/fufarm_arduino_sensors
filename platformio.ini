; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[common]
lib_deps = 
	beegee-tokyo/DHT sensor library for ESPx@1.19.0
	https://github.com/arduino-libraries/ArduinoMDNS.git#875d963
	https://github.com/DFRobot/DFRobot_AHT20.git@1.0.0
	https://github.com/DFRobot/DFRobot_EC.git#ed56349
	https://github.com/DFRobot/DFRobot_ENS160.git#7a45a70
	https://github.com/DFRobot/DFRobot_PH.git#43f229a
	https://github.com/PaulStoffregen/OneWire.git@2.3.8
	knolleary/PubSubClient@2.8
	dawidchyrzynski/home-assistant-integration@2.1.0
build_flags = 
	; sample time in milliseconds (60k = 60seconds or 1 minute)
	-DSAMPLE_WINDOW_MILLIS=60000
build_flags_sensors = 
	-DSENSORS_LIGHT_PIN=A0
	-DSENSORS_CO2_PIN=A1
	-DSENSORS_EC_PIN=A2
	-DSENSORS_PH_PIN=A3
	-DSENSORS_MOISTURE_PIN=A4
	; -DSENSORS_DHT22_PIN=2
	-DSENSORS_SEN0217_PIN=3
	-DSENSORS_DS18S20_PIN=4
	-DSENSORS_SEN0204_PIN=5
	-DHAVE_AHT20=1
	; -DHAVE_ENS160=1
	-DCALIBRATION_TOGGLE_PIN=12
build_flags_ha_host = \"192.168.8.100\"
build_flags_ha = 
	; By default mDNS/Bonjour is used to discover IP, works in most cases, uncomment the line below to disable it and fix a value above
	; -DHOME_ASSISTANT_MQTT_HOST=${common.build_flags_ha_host}
	; Debugging for HA is enabled for easier visibility into what is happening in the library
	-DARDUINOHA_DEBUG
	-DHOME_ASSISTANT_MQTT_PORT=1883
	-DHOME_ASSISTANT_MQTT_TLS=0
	-DHOME_ASSISTANT_MQTT_TLS_SUPPRESS_WARNING=0
	-DHOME_ASSISTANT_MQTT_USERNAME=\"ard1\"
	-DHOME_ASSISTANT_MQTT_PASSWORD=\"0\"
	-DHOME_ASSISTANT_DEVICE_NAME=\"ard1\"
	; Disable components of the Home Assistant library that we do not use
	; https://github.com/dawidchyrzynski/arduino-home-assistant/blob/1d333ab229b2dcefedf1b51e033f2177b74fca8c/docsrc/source/documents/library/compiler-macros.rst#code-optimization
	-DEX_ARDUINOHA_BUTTON
	-DEX_ARDUINOHA_CAMERA
	-DEX_ARDUINOHA_COVER
	-DEX_ARDUINOHA_DEVICE_TRACKER
	-DEX_ARDUINOHA_DEVICE_TRIGGER
	-DEX_ARDUINOHA_FAN
	-DEX_ARDUINOHA_HVAC
	-DEX_ARDUINOHA_LIGHT
	-DEX_ARDUINOHA_LOCK
	-DEX_ARDUINOHA_SCENE
	-DEX_ARDUINOHA_SELECT
	-DEX_ARDUINOHA_TAG_SCANNER
build_flags_wifi = 
	-DWIFI_SSID=\"fumanc\"
	; -DWIFI_PASSPHRASE=\"<your-value>\"
	; in most cases you do not need enterprise wifi but if you do, maybe just the username and password
	; -DWIFI_ENTERPRISE_USERNAME=\"johnson@gov.uk\"
	; -DWIFI_ENTERPRISE_PASSWORD=\"<your-value>\"
	; -DWIFI_ENTERPRISE_IDENTITY=\"<your-value>\"
	; -DWIFI_ENTERPRISE_CA=\"<your-value>\"
	; by default, we list all networks but if you want to skip this, uncomment the line below
	; -DWIFI_SKIP_LIST_NETWORKS=1
build_flags_esp32_usb_2_ports = 
	; For boards with two ports, these allow use of the USB/JTAG port which has less noise
	; or funny characters but may need special/official drivers for it.
	-DARDUINO_USB_MODE=1
	-DARDUINO_USB_CDC_ON_BOOT=1
extra_scripts = 
	pre:scripts/version.py

; The environments specified in default_envs are used when the current command does not have
; a command override using --environment/-e options
; Comment/uncomment, one of the lines to target just one which is easier/faster for local use.
[platformio]
; default_envs = esp32-s3-devkitc1-n16r8
; default_envs = leonardo
; default_envs = uno_r4_wifi
; default_envs = uno_wifi_rev2
default_envs = 
	dfrobot_firebeetle2_esp32e
	esp32-s3-devkitc1-n16r8
	leonardo
	uno_r4_wifi
	uno_wifi_rev2
	ci_validation_1
	ci_validation_2
	ci_validation_3

[env:dfrobot_firebeetle2_esp32e]
platform = https://github.com/pioarduino/platform-espressif32.git#54.03.20
framework = arduino
board = dfrobot_firebeetle2_esp32e
lib_deps = ${common.lib_deps}
build_flags = 
	${common.build_flags}
	${common.build_flags_sensors}
	${common.build_flags_wifi}
	${common.build_flags_ha}
extra_scripts = ${common.extra_scripts}

[env:esp32-s3-devkitc1-n16r8]
platform = https://github.com/pioarduino/platform-espressif32.git#54.03.20
framework = arduino
board = esp32-s3-devkitc1-n16r8
lib_deps = ${common.lib_deps}
build_flags = 
	${common.build_flags}
	${common.build_flags_sensors}
	${common.build_flags_wifi}
	${common.build_flags_ha}
	${common.build_flags_esp32_usb_2_ports}
extra_scripts = ${common.extra_scripts}

[env:leonardo]
platform = platformio/atmelavr@5.1.0
framework = arduino
board = leonardo
lib_deps = 
	${common.lib_deps}
	bblanchon/ArduinoJson@7.4.2
lib_ignore = dawidchyrzynski/home-assistant-integration
build_flags = 
	${common.build_flags}
	${common.build_flags_sensors}

[env:uno_r4_wifi]
platform = platformio/renesas-ra@1.7.0
framework = arduino
board = uno_r4_wifi
lib_deps = ${common.lib_deps}
build_flags = 
	${common.build_flags}
	${common.build_flags_sensors}
	${common.build_flags_wifi}
	${common.build_flags_ha}
; needed for WiFi sublibraries to be found correctly
lib_ldf_mode = deep+

[env:uno_wifi_rev2]
platform = platformio/atmelmegaavr@1.9.0
framework = arduino
board = uno_wifi_rev2
lib_deps = 
	${common.lib_deps}
	arduino-libraries/WiFiNINA@1.9.1
build_flags = 
	${common.build_flags}
	${common.build_flags_sensors}
	${common.build_flags_wifi}
	${common.build_flags_ha}
	; this exists for builds to work because we have ran out of flash space
	-DHOME_ASSISTANT_MQTT_HOST=${common.build_flags_ha_host}

; The ci_validation_[1,2] configs exist to test that code works with only one sensor.
; Two environments to test that one works without the other.
[env:ci_validation_1]
extends = env:leonardo
build_flags = ${common.build_flags} -DSENSORS_LIGHT_PIN=A0

[env:ci_validation_2]
extends = env:leonardo
build_flags = ${common.build_flags} -DHAVE_AHT20=1

; The ci_validation_3 config exist to test that discovery works for uno wifi rev2
[env:ci_validation_3]
extends = env:uno_wifi_rev2
build_flags = 
	${env:uno_wifi_rev2.build_flags}
	-USENSORS_CO2_PIN
	-USENSORS_EC_PIN
	-USENSORS_PH_PIN
	-USENSORS_MOISTURE_PIN
	-USENSORS_SEN0217_PIN
	-USENSORS_DS18S20_PIN
	-USENSORS_SEN0204_PIN
	-UCALIBRATION_TOGGLE_PIN
	-UHOME_ASSISTANT_MQTT_HOST

; To be restored once we actually create tests
; [env:native]
; platform = platformio/native@1.2.1
; test_framework = unity
